# This is a basic workflow to help you get started with Actions

name: Canary Deploy

on:          
  push:
    branches: [ master ]
    paths-ignore:
      - '.github/**'
      - 'version.txt'  
  workflow_dispatch: 

env:
  AZURE_WEBAPP_NAME: bird-webapp-demo-prod    # set this to your application's name
  CONTAINER_REPO: 'birdmodify/birdtest-webapp'
  PROD_WEBAPP_URL: https://bird-webapp-demo-prod.azurewebsites.net
  STG_WEBAPP_URL: https://bird-webapp-demo-prod-staging.azurewebsites.net
  AZURE_RG_NAME : bird-lab-rg
  
jobs:
  deploy-to-staging:    
    runs-on: ubuntu-latest    
    environment: 
      name: production
      url: ${{ env.STG_WEBAPP_URL }}
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:        
            ref: ${{ github.ref }}   
            
      - name: Set Version
        run: |
          var_version=$(cat version.txt)
          echo "VERSION_NO=${var_version}" >> $GITHUB_ENV
          
      - name: Get Version         
        run: echo "Version is ${{ env.VERSION_NO }}"
        
      - name: Deploy to Azure Web App staging
        id: deploy-to-webapp-staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'staging'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}        
          images: 'index.docker.io/${{ env.CONTAINER_REPO }}:${{ env.VERSION_NO }}'
        
  canary-release:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-to-staging]
    environment: 
      name: production
      url: ${{ env.PROD_WEBAPP_URL }}
      
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
  
    - name: Azure CLI Action
      uses: Azure/cli@v1
      with:
        # Specify the script here
        inlineScript: |
          #echo "Hello World"
          #az group show -n bird-lab-rg     
          #!/bin/bash
          WEBAPP=${{ env.AZURE_WEBAPP_NAME }}
          RESOURCEGROUP=${{ env.AZURE_RG_NAME }}
          MINUTES=3
          RAMPUPPERCENTAGE=10
          regularExpression='^[0-9]+$'
          if ! ([[ $MINUTES =~ $regularExpression ]] && [[ $RAMPUPPERCENTAGE =~ $regularExpression ]]);
          then
             echo "error: Not a number" >&2;
          else
           secsToRumpUp=$(awk "BEGIN {print ($RAMPUPPERCENTAGE/100)*($MINUTES*60)}")
           rumpup=$RAMPUPPERCENTAGE;
           incremental=$(awk "BEGIN {print ($MINUTES*60)/$secsToRumpUp}")
           echo "Your webapp $WEBAPP in the resource group $RESOURCEGROUP will be traffic-routed in the next $MINUTES minutes every $secsToRumpUp secs a $RAMPUPPERCENTAGE %";
           for (( c=0; c<$incremental; c++ ))
           do      
             echo "Incrementing staging slot to $rumpup %";   
             az webapp traffic-routing set --distribution staging=$rumpup --name $WEBAPP --resource-group $RESOURCEGROUP
             sleep "$secsToRumpUp"
             let "rumpup += RAMPUPPERCENTAGE";
           done
           echo "Rolling back traffic-routing..."
           az webapp traffic-routing clear --name $WEBAPP --resource-group $RESOURCEGROUP
           echo "Swapping $WEBAPP"
          az webapp deployment slot swap  -g $RESOURCEGROUP -n $WEBAPP --slot staging --target-slot production
          fi
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        #azcliversion: # optional, default is agentazcliversion
