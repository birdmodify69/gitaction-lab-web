# This is a basic workflow to help you get started with Actions

name: Build Container

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  #pull_request:
  #  branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CONTAINER_REPO: 'birdmodify/birdtest-webapp'
  AZURE_WEBAPP_NAME: bird-webapp-demo-testing 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  set-version-control:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:        
          ref: control  
       
      - run: echo The tags is ${{ github.sha }}      
      - run: echo ${{ github.sha }} > version.txt
      - run: ls -la
      
      - name: Commit version files
        run: |          
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add version.txt
          git commit -m "update version to be ${{ github.sha }}"
          
      - name: Push version changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: control
          
  build-container:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [set-version-control]
    environment: testing
    outputs:      
      tag: ${{ github.sha }}
      
    strategy:
      matrix:
        node-version: [12.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:        
            ref: master 
      
      - name: Setup Node.js ${{ matrix.node-version }} 
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      #- run: npm install
      #- run: ls -l
      #- run: CI=true npm run test
      #- run: cat coverage/cobertura-coverage.xml          
     
      - name: Install Dependencies
        run: | 
          npm install
          ls -l
          
      - name: Unit Testing
        run: |
          CI=true npm run test
          cat coverage/cobertura-coverage.xml
      
      - name: Publish Unit Test Result
        uses: 5monkeys/cobertura-action@master
        with:
          path: coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 0
          
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: birdtest-webapp
          path: build

      - uses: sonarsource/sonarqube-scan-action@master
        env:
          sonar.projectKey: test-demo-web
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}    

      - name: SonarQube Quality Gate Check      
        uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        #with:
          # Location of the scanner metadata report file
          # scanMetadataReportFile: # optional, default is .scannerwork/report-task.txt
          
      - name: Build to Package
        run: | 
          npm run build
          ls -l
      
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: birdtest-webapp
          path: build

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Log in to registry
        uses: docker/login-action@v1
        with:
          registry: https://index.docker.io/v1/
          username: ${{ secrets.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_TOKEN }}     
        
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.CONTAINER_REPO }}:${{ github.sha }}
      
      - run: echo ${{ github.sha }} > version.txt
      - run: ls -la     

      - name: Trivy container images vulnerability scanner
        uses: aquasecurity/trivy-action@2a2157eb22c08c9a1fac99263430307b8d1bc7a2
        with:
          #image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
          image-ref: '${{ env.CONTAINER_REPO }}:${{ github.sha }}'          
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'          
